# $Id: check,v 1.9 2004/10/08 23:58:08 essu Exp $
#
#
# Copyright (c) 2004 dietmarw Germany. All rights reserved.
#
#
# aktuelle Versionen gibt es hier:
# $Source: /home/xubuntu/berlios_backup/github/tmp-cvs/yadi/Repository/scripts/check,v $
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 675 Mass Ave, Cambridge MA 02139, USA.
#
# Mit diesem Programm koennen Images fuer DBox2 erstellt werden
#
# -------------------------------------------------------
#
echo "tool checker fuer cvs - Version 0.7 dw - by horsti666 - modified by dietmarw"
CUT=`which cut`
GREP=`which grep`
 
# automake
AUTOMAKE=`which automake`
if ( test -e  $AUTOMAKE )
        then
        echo "automake >=1.7       :"`$AUTOMAKE --version | grep "automake " | cut -f4 -d " "`
        else
        echo -e "\033[37;41mautomake nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# autoconf
AUTOCONF=`which autoconf`
if ( test -e $AUTOCONF )
        then
        echo "autoconf >=2.50      :"`$AUTOCONF --version | grep "autoconf " | cut -f4 -d " "`
        else
        echo -e "\033[37;41mautoconf nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# cvs
MYCVS=`which cvs`
if ( test -e $MYCVS )
        then
        echo "cvs                  :"`$MYCVS --version | grep Concurrent | cut -f5 -d " "`
        else
        echo -e "\033[37;41mcvs nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# libtool
LIBTOOL=`which libtool`
if ( test -e $LIBTOOL )
        then
        echo "libtool >=1.4.2      :"`$LIBTOOL --version | $GREP "libtool)" | $CUT -f4 -d " "`
        else
        echo -e "\033[37;41mlibtool nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# make
MAKE=`which make`
if ( test -e $MAKE )
        then
        echo "make >=3.79          :"`$MAKE --version | $GREP Make | $CUT -f3 -d " "`
        else
        echo -e "\033[37;41mmake nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# gettext
GETTEXT=`which gettext`
if ( test -e $GETTEXT )
        then
        echo "gettext >=0.12.1     :"`$GETTEXT --version | $GREP gettext | $CUT -f4 -d " "`
        else
        echo -e "\033[37;41mgettext nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# makeinfo
MAKEINFO=`which makeinfo`
if ( test -e $MAKEINFO )
        then
        echo "makeinfo             :"`$MAKEINFO --version | $GREP makeinfo | $CUT -f4 -d " "`
        else
        echo -e "\033[37;41mmakeinfo nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# tar
TAR=`which tar`
if ( test -e $TAR )
        then
        echo "tar                  :"`$TAR --version | $GREP tar | $CUT -f4 -d " "`
        else
        echo -e "\033[37;41mtar nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# bunzip2
BUNZIP2=`which bunzip2`
if ( test -e $BUNZIP2 )
        then
        echo "bunzip2              :"`bunzip2 --help 2> btmp; $GREP Version < btmp | $CUT -c 50-54; rm btmp`
        else
        echo -e "\033[37;41mbunzip2 nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# gunzip
GUNZIP=`which gunzip`
if ( test -e $GUNZIP )
        then
        echo "gunzip               :"`$GUNZIP --version | $GREP gunzip | $CUT -f2 -d " "`
        else
        echo -e "\033[37;41mgunzip nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# patch
PATCH=`which patch`
if ( test -e $PATCH )
        then
        echo "patch                :"`$PATCH --version | $GREP "patch " | $CUT -f2 -d " "`
        else
        echo -e "\033[37;41mpatch nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# infocmp
INFOCMP=`which infocmp`
if ( test -e $INFOCMP )
        then
        echo "infocmp              :"`$INFOCMP -V | $GREP ncurses | $CUT -f2 -d " "`
        else
        echo -e "\033[37;41minfocmp nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# gcc
GCC=`which gcc`
if ( test -e $GCC )
        then
        echo "gcc >=3.0            :"`$GCC --version | $GREP "gcc " | $CUT -f3 -d " "`
        else
        echo -e "\033[37;41mgcc nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# c++
CCC=`which g++`
if ( test -e $CCC )
        then
        echo "g++ >=3.0            :"`$CCC --version | $GREP "g++ " | $CUT -f3 -d " "`
        else
        echo -e "\033[37;41mg++ nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# yacc
YACC=`which yacc`
if ( test -e $YACC )
        then
        echo "yacc                 :"`$YACC --version 2>&1 >/dev/null | $GREP Bison | echo "yacc installiert"`
        else
        echo -e "\033[37;41myacc nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# bison
BISON=`which bison`
if ( test -e $BISON )
        then
        echo "bison                :"`$BISON --version | $GREP Bison | $CUT -f4 -d " "`
        else
        echo -e "\033[37;41mbison nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# flex
FLEX=`which flex`
if ( test -e $FLEX )
        then
        echo "flex                 :"`$FLEX --version | $GREP flex | $CUT -f2 -d " "`
        else
        echo -e "\033[37;41myacc nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# pkg-config
PKGCONFIG=`which pkg-config`
if ( test -e $PKGCONFIG )
        then
        echo "pkg-config           :"`$PKGCONFIG --version | $GREP .`
        else
        echo -e "\033[37;41mpkg-config nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# python
PYTHON=`which python`
if ( test -e $PYTHON )
        then
        echo "python               :"`$PYTHON --version 2>&1 >/dev/null | $GREP python | echo "python installiert"`
        else
        echo -e "\033[37;41mpython nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# mkfs.jffs2
MKFSJFFS2=`which mkfs.jffs2`
if ( test -e $MKFSJFFS2 )
        then
        echo "mkfs.jffs2           :"`$MKFSJFFS2 --version 2>&1 >/dev/null | $GREP mkfs | $CUT -f3 -d " "`
        else
        echo -e "\033[37;41mkfs.jffs2 nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
# mksquashfs #welche version ist mindestens noetig?
MKSQUASHFS=`which mksquashfs`
if ( test -e $MKSQUASHFS)
        then
        echo "mksquashfs 2.0    :"`$MKSQUASHFS -version | $GREP mksquashfs | cut -d" " -f3`
        else
        echo -e "\033[37;41mksquashfs nicht installiert\033[37;40m"
        exit 1
fi
#---------------------------------------------#
echo "Versions-Check Ende"
