--- setup_extra.cpp.orig	2004-09-28 23:56:46.000000000 +0200
+++ setup_extra.cpp.yadi	2004-09-28 23:55:26.000000000 +0200
@@ -19,6 +19,10 @@
  *
  * $Id: setup_extra.cpp.diff,v 1.1 2004/10/07 12:11:27 essu Exp $
  */
+
+#include <netinet/in.h>
+#include <linux/route.h>
+
 #include <enigma.h>
 #include <setup_extra.h>
 #include <setupengrab.h>
@@ -28,6 +32,33 @@
 #include <lib/dvb/decoder.h>
 #include <lib/gui/emessage.h>
 #include <lib/system/info.h>
+#include <stdio.h>
+#include <string>
+#include <unistd.h>
+
+#ifndef DISABLE_NFS
+#include <sys/mount.h>
+#include <sys/stat.h>
+#include <signal.h>
+#include <unistd.h>
+#include <pthread.h>
+#include <lib/gui/multipage.h>
+#include <lib/gui/emessage.h>
+#include <lib/base/console.h>
+#endif
+
+#include <lib/base/i18n.h>
+#include <lib/dvb/edvb.h>
+#include <lib/gui/elabel.h>
+#include <lib/gui/enumber.h>
+#include <lib/gui/ebutton.h>
+#include <lib/gui/echeckbox.h>
+#include <lib/gui/textinput.h>
+#include <lib/gui/combobox.h>
+#include <lib/gui/eskin.h>
+#include <lib/driver/rc.h>
+#include <lib/system/econfig.h>
+
 
 eExpertSetup::eExpertSetup()
 	:eSetupWindow(_("Expert Setup"), 10, 400)
@@ -44,6 +75,7 @@
 	{
 		CONNECT((new eListBoxEntryMenu(&list, _("Communication Setup"), eString().sprintf("(%d) %s", ++entry, _("open communication setup")) ))->selected, eExpertSetup::communication_setup);
 		CONNECT((new eListBoxEntryMenu(&list, _("Ngrab Streaming Setup"), eString().sprintf("(%d) %s", ++entry, _("open ngrab server setup")) ))->selected, eExpertSetup::ngrab_setup);
+		CONNECT((new eListBoxEntryMenu(&list, _("Mount Setup"), eString().sprintf("(%d) %s", ++entry, _("open mount setup")) ))->selected, eExpertSetup::mount_setup);
 		CONNECT((new eListBoxEntryMenu(&list, _("Software Update"), eString().sprintf("(%d) %s", ++entry, _("open software update")) ))->selected, eExpertSetup::software_update);
 	}
 #endif
@@ -59,12 +91,47 @@
 	CONNECT((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Use http authentification"), "/ezap/webif/lockWebIf", _("enables the http (user/password) authentification")))->selected, eExpertSetup::reinitializeHTTPServer );
 	CONNECT((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Don't open serial port"), "/ezap/extra/disableSerialOutput", _("don't write debug messages to /dev/tts/0")))->selected, eExpertSetup::reinitializeHTTPServer );
 	new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Auto bouquet change"), "/elitedvb/extra/autobouquetchange", _("change into next bouquet when end of current bouquet is reached"));
+	new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Enable History Zapping"), "/elitedvb/extra/extzapping", _("Do not care about actual mode when zapping in history list"));
 	if ( eSystemInfo::getInstance()->getHwType() == eSystemInfo::DM7000 ||
 		eSystemInfo::getInstance()->getHwType() == eSystemInfo::DM7020 )
 		CONNECT((new eListBoxEntryCheck((eListBox<eListBoxEntry>*)&list,_("Enable fast zapping"),"/elitedvb/extra/fastzapping",_("enables faster zapping.. but with visible sync")))->selected, eExpertSetup::fastZappingChanged );
+	if ( eSystemInfo::getInstance()->getHwType() < 3 ) // dbox2-bootoptions
+	{
+		new eListBoxEntrySeparator( (eListBox<eListBoxEntry>*)&list, eSkin::getActive()->queryImage("listbox.separator"), 0, true );
+		CONNECT_2_1((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Start with Enigma"), "/yadi/bootoptions/enigma", _("skip boot-menu, start Enigma")))->selected, eExpertSetup::fileToggle,"/var/etc/.enigma");
+		CONNECT_2_1((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Show Boot Info"), "/yadi/bootoptions/boot_info", _("show infos while booting")))->selected, eExpertSetup::fileToggle,"/var/etc/.boot_info");
+		CONNECT_2_1((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("No HW section filtering"), "/yadi/bootoptions/hw_sections", _("Don't use hardware section filtering")))->selected, eExpertSetup::fileToggle,"/var/etc/.hw_sections");
+		CONNECT_2_1((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("SPTS-mode"), "/yadi/bootoptions/spts_mode", _("use SPTS-Mode (enables TS-recording)")))->selected, eExpertSetup::fileToggle,"/var/etc/.spts_mode");
+	}
+	if ( eSystemInfo::getInstance()->getHwType() == eSystemInfo::dbox2Nokia && eSystemInfo::getInstance()->getFEType() == eSystemInfo::feCable )
+		CONNECT_2_1((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Nokia cable driver"), "/yadi/bootoptions/cable", _("use different driver for Nokia cable boxes")))->selected, eExpertSetup::fileToggle,"/var/etc/.cable");
+	if ( eSystemInfo::getInstance()->getHwType() == eSystemInfo::dbox2Nokia )
+		CONNECT_2_1((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("Old Nokia remote"), "/yadi/bootoptions/oldrc", _("react to old Nokia remote control")))->selected, eExpertSetup::fileToggle,"/var/etc/.oldrc");
+	if ( eSystemInfo::getInstance()->getHwType() == eSystemInfo::dbox2Philips )
+		CONNECT_2_1((new eListBoxEntryCheck( (eListBox<eListBoxEntry>*)&list, _("New Philips driver"), "/yadi/bootoptions/tda80xx.o", _("use tda80xx driver for Philips boxes")))->selected, eExpertSetup::fileToggle,"/var/etc/.tda80xx.o");
+
 	setHelpID(92);
 }
 
+void eExpertSetup::fileToggle(bool newState, const char* filename)
+{
+  FILE* test;
+  test = fopen(filename,"r");
+  if (test != NULL) {
+    fclose(test);
+    eString cmd = "rm ";
+    cmd += filename;
+  ::unlink(filename);
+  }
+  else
+  {
+    eString cmd = "touch ";
+    cmd += filename;
+  system(cmd.c_str());
+  }
+ }
+
+
 void eExpertSetup::colorbuttonsChanged(bool b)
 {
 	eServiceSelector *sel = eZap::getInstance()->getServiceSelector();
@@ -171,3 +238,562 @@
 	}
 	show();
 }
+
+#ifndef DISABLE_NFS
+void eExpertSetup::mount_setup()
+{
+	hide();
+	eMountSetup dlg;
+	dlg.show();
+	dlg.exec();
+	dlg.hide();
+	show();
+//	setFocus(nfs);
+}
+#endif
+
+#ifndef DISABLE_NFS
+
+#define MAX_NFS_ENTRIES 4
+
+static void errorMessage(const eString message, int type=0)
+{
+	int flags;
+	if(type==1)
+		flags = eMessageBox::iconInfo|eMessageBox::btOK;
+	else
+		flags = eMessageBox::iconWarning|eMessageBox::btOK;
+	eMessageBox mb(message, _("Info"), flags);
+	mb.show();
+	mb.exec();
+	mb.hide();
+}
+
+eMountSetup::eMountSetup()
+	:eWindow(0), timeout(eApp), mountContainer(0)
+{
+	bool have_cifs=false;
+	FILE *f=fopen("/proc/filesystems", "rt");
+	if (f)
+	{
+		while (1)
+		{
+			char buffer[128];
+			if (!fgets(buffer, 128, f))
+				break;
+			if ( strstr(buffer, "cifs") )
+				have_cifs=true;
+		}
+		fclose(f);
+	}
+
+	CONNECT(timeout.timeout, eMountSetup::mountTimeout);
+	cur_entry=0;
+	headline.sprintf("NFS/CIFS Setup (%d/%d)",cur_entry + 1, MAX_NFS_ENTRIES);
+
+	setText(headline);
+	cmove(ePoint(140,90));
+	cresize(eSize(450,400));
+
+	__u32 sip=ntohl(0x0a000061);
+
+	int de[4];
+	int y = 10;
+	int fd=eSkin::getActive()->queryValue("fontsize", 20);
+
+	eLabel *l = new eLabel(this);
+	l->move(ePoint(10,y));
+	l->resize(eSize(120,fd+4));
+	l->setText("IP:");
+
+	eNumber::unpack(sip, de);
+	ip=new eNumber(this, 4, 0, 255, 3, de, 0, l);
+	ip->move(ePoint(120, y));
+	ip->resize(eSize(200, fd+10));
+	ip->setFlags(eNumber::flagDrawPoints);
+	ip->setHelpText(_("enter IP Address (0..9, left, right)"));
+	ip->loadDeco();
+	CONNECT(ip->selected, eMountSetup::fieldSelected);
+
+	combo_fstype=new eComboBox(this, 2, l);
+	combo_fstype->move(ePoint(360,y));
+	combo_fstype->resize(eSize(80, fd+10));
+	combo_fstype->loadDeco();
+	combo_fstype->setHelpText(_("press ok to change mount type"));
+	new eListBoxEntryText( *combo_fstype, "NFS", (void*)0, 0, "Network File System");
+	if (have_cifs)
+		new eListBoxEntryText( *combo_fstype, "CIFS", (void*)1, 0, "Common Internet File System");
+	combo_fstype->setCurrent(0,true);
+	CONNECT(combo_fstype->selchanged, eMountSetup::fstypeChanged);
+
+	y = y + 34;
+
+	l = new eLabel(this);
+	l->move(ePoint(10, y));
+	l->resize(eSize(120, fd+4));
+	l->setText("Dir:");
+
+	sdir = new eTextInputField(this,l);
+	sdir->move(ePoint(120, y));
+	sdir->resize(eSize(320, fd+10));
+	sdir->setUseableChars("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.,:|!?/");
+	sdir->loadDeco();
+	sdir->setHelpText(_("enter the name of the share without trailing slash"));
+
+	y = y + 34;
+
+	l = new eLabel(this);
+	l->move(ePoint(10, y));
+	l->resize(eSize(120, fd+4));
+	l->setText("LocalDir:");
+
+	ldir = new eTextInputField(this,l);
+	ldir->move(ePoint(120, y));
+	ldir->resize(eSize(320, fd+10));
+	ldir->setUseableChars("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.,:|!?/");
+	ldir->loadDeco();
+	ldir->setHelpText(_("enter name of the local mount point with trailing slash"));
+
+	y = y + 34;
+
+	l = new eLabel(this);
+	l->move(ePoint(10, y));
+	l->resize(eSize(120, fd+4));
+	l->setText("Options:");
+
+	combo_options=new eComboBox(this, 3, l);
+	combo_options->move(ePoint(120,y));
+	combo_options->resize(eSize(320, fd+10));
+	combo_options->loadDeco();
+	combo_options->setHelpText(_("press ok to change mount options"));
+	new eListBoxEntryText( *combo_options, "", (void*)0, 0);
+	new eListBoxEntryText( *combo_options, "ro", (void*)1, 0);
+	new eListBoxEntryText( *combo_options, "rw", (void*)2, 0);
+	new eListBoxEntryText( *combo_options, "ro,soft", (void*)3, 0);
+	new eListBoxEntryText( *combo_options, "rw,soft", (void*)4, 0);
+	new eListBoxEntryText( *combo_options, "ro,tcp", (void*)5, 0);
+	new eListBoxEntryText( *combo_options, "rw,tcp", (void*)6, 0);
+	new eListBoxEntryText( *combo_options, "ro,udp", (void*)7, 0);
+	new eListBoxEntryText( *combo_options, "rw,udp", (void*)8, 0);
+	new eListBoxEntryText( *combo_options, "ro,soft,udp", (void*)9, 0);
+	new eListBoxEntryText( *combo_options, "rw,soft,udp", (void*)10, 0);
+	new eListBoxEntryText( *combo_options, "ro,soft,tcp", (void*)11, 0);
+	new eListBoxEntryText( *combo_options, "rw,soft,tcp", (void*)12, 0);
+	new eListBoxEntryText( *combo_options, "ro,soft,udp,sync", (void*)13, 0);
+	new eListBoxEntryText( *combo_options, "rw,soft,udp,sync", (void*)14, 0);
+	new eListBoxEntryText( *combo_options, "ro,soft,tcp,sync", (void*)15, 0);
+	new eListBoxEntryText( *combo_options, "rw,soft,tcp,sync", (void*)16, 0);
+	combo_options->setCurrent(0,true);
+
+	y = y + 34;
+
+	l = new eLabel(this);
+	l->move(ePoint(10, y));
+	l->resize(eSize(120, fd+4));
+	l->setText("Extra:");
+
+	extraoptions=new eTextInputField(this, l);
+	extraoptions->move(ePoint(120, y));
+	extraoptions->resize(eSize(320, fd+10));
+	extraoptions->setMaxChars(100);
+	extraoptions->loadDeco();
+	extraoptions->setHelpText(_("press ok to edit extra options"));
+
+	y = y + 34;
+
+	luser = new eLabel(this);
+	luser->move(ePoint(10, y));
+	luser->resize(eSize(120, fd+4));
+	luser->setText("User:");
+
+	user=new eTextInputField(this, luser);
+	user->move(ePoint(120, y));
+	user->resize(eSize(320, fd+10));
+	user->setMaxChars(100);
+	user->loadDeco();
+	user->setHelpText(_("press ok to edit username"));
+
+	y = y + 34;
+
+	lpass = new eLabel(this);
+	lpass->move(ePoint(10, y));
+	lpass->resize(eSize(120, fd+4));
+	lpass->setText("Pass:");
+
+	pass=new eTextInputField(this, lpass);
+	pass->move(ePoint(120, y));
+	pass->resize(eSize(320, fd+10));
+	pass->setMaxChars(100);
+	pass->loadDeco();
+	pass->setHelpText(_("press ok to edit password"));
+
+	y = y + 34;
+
+	doamount=new eCheckbox(this, 0, 1);
+	doamount->setText("Automount");
+	doamount->move(ePoint(120, y));
+	doamount->resize(eSize(140, fd+4));
+	doamount->setHelpText(_("enable/disable automount (ok)"));
+
+	load_config();
+
+	//buttons
+	prev = new eButton(this);
+	prev->move(ePoint(10, clientrect.height() - (80+fd) ));
+	prev->resize(eSize(30, 40));
+	prev->setText("<");
+	prev->setHelpText(_("go to previous share"));
+	prev->loadDeco();
+	CONNECT(prev->selected, eMountSetup::prevPressed);
+
+	umount = new eButton(this);
+	umount->move(ePoint(45, clientrect.height() - (80+fd) ));
+	umount->resize(eSize(109, 40));
+	umount->setText("umount");
+	umount->setHelpText(_("press ok to unmount this share"));
+	umount->setShortcut("red");
+	umount->setShortcutPixmap("red");
+	umount->loadDeco();
+	CONNECT(umount->selected, eMountSetup::umountPressed);
+
+	mount = new eButton(this);
+	mount->move(ePoint(159, clientrect.height() - (80+fd) ));
+	mount->resize(eSize(107, 40));
+	mount->setText("mount");
+	mount->setHelpText(_("press ok to mount this share"));
+	mount->loadDeco();
+	mount->setShortcut("green");
+	mount->setShortcutPixmap("green");
+	CONNECT(mount->selected, eMountSetup::mountPressed);
+
+	ok = new eButton(this);
+	ok->move(ePoint(271, clientrect.height() - (80+fd) ));
+	ok->resize(eSize(137, 40));
+	ok->setText(_("save"));
+	ok->setHelpText(_("press ok to save this share"));
+	ok->loadDeco();
+	ok->setShortcut("yellow");
+	ok->setShortcutPixmap("yellow");
+	CONNECT(ok->selected, eMountSetup::okPressed);
+
+	next = new eButton(this);
+	next->move(ePoint(414, clientrect.height() - (80+fd) ));
+	next->resize(eSize(30, 40));
+	next->setText(">");
+	next->loadDeco();
+	next->setHelpText(_("go to next share"));
+	CONNECT(next->selected, eMountSetup::nextPressed);
+
+	//statusbar
+	sbar = new eStatusBar(this);
+	sbar->move( ePoint(0, clientrect.height()-50) );
+	sbar->resize( eSize( clientrect.width(), 50) );
+	sbar->loadDeco();
+}
+
+void eMountSetup::fstypeChanged(eListBoxEntryText *le)
+{
+	if ( le )
+	{
+		if ( le->getKey() )  // CIFS
+		{
+			luser->show();
+			lpass->show();
+			user->show();
+			pass->show();
+		}
+		else
+		{
+			luser->hide();
+			lpass->hide();
+			user->hide();
+			pass->hide();
+		}
+	}
+}
+
+void eMountSetup::load_config()
+{
+	__u32 sip=ntohl(0x0a000061);
+	char *ctmp  = 0;
+	int itmp = 0;
+	int de[4],i;
+
+	cmd.sprintf("/elitedvb/network/nfs%d/",cur_entry);
+
+	eConfig::getInstance()->getKey((cmd+"ip").c_str(), sip);
+	eNumber::unpack(sip, de);
+	for(i=0;i<4;i++)
+		ip->setNumber(i, de[i]);
+
+	eConfig::getInstance()->getKey((cmd+"fstype").c_str(), itmp);
+
+	if(combo_fstype->getCurrent()->getKey())
+	{
+		luser->show();
+		lpass->show();
+		user->show();
+		pass->show();
+	}
+	else
+	{
+		luser->hide();
+		lpass->hide();
+		user->hide();
+		pass->hide();
+	}
+
+	combo_fstype->setCurrent(itmp, true);
+
+	if (!eConfig::getInstance()->getKey((cmd+"sdir").c_str(), ctmp))
+	{
+		sdir->setText(ctmp);
+		free(ctmp);
+	}
+
+	if (!eConfig::getInstance()->getKey((cmd+"ldir").c_str(), ctmp))
+	{
+		ldir->setText(ctmp);
+		free(ctmp);
+	}
+
+	if(!ldir->getText())
+		ldir->setText("/mnt");
+
+	itmp=0;
+	eConfig::getInstance()->getKey((cmd+"options").c_str(), itmp);
+	combo_options->setCurrent(itmp, true);
+
+	if (!eConfig::getInstance()->getKey((cmd+"extraoptions").c_str(), ctmp))
+	{
+		extraoptions->setText(ctmp);
+		free(ctmp);
+	}
+	else if (!itmp)
+		extraoptions->setText("nolock,rsize=32768,wsize=32768");
+
+	if (!eConfig::getInstance()->getKey((cmd+"username").c_str(), ctmp))
+	{
+		user->setText(ctmp);
+		free(ctmp);
+	}
+
+	if (!eConfig::getInstance()->getKey((cmd+"password").c_str(), ctmp))
+	{
+		pass->setText(ctmp);
+		free(ctmp);
+	}
+
+	itmp=0;
+	eConfig::getInstance()->getKey((cmd+"automount").c_str(), itmp);
+	doamount->setCheck(itmp);
+}
+
+void eMountSetup::prevPressed()
+{
+	cur_entry = ((cur_entry + MAX_NFS_ENTRIES - 1) % MAX_NFS_ENTRIES);
+	load_config();
+	headline.sprintf("NFS/CIFS Setup (%d/%d)",cur_entry + 1, MAX_NFS_ENTRIES);
+	setText(headline);
+	setFocus(prev);
+}
+
+void eMountSetup::nextPressed()
+{
+	cur_entry = ((cur_entry + 1) % MAX_NFS_ENTRIES);
+	load_config();
+	headline.sprintf("NFS/CIFS Setup (%d/%d)",cur_entry + 1, MAX_NFS_ENTRIES);
+	setText(headline);
+	setFocus(next);
+}
+
+void eMountSetup::okPressed()
+{
+	int IP[4];
+	__u32 sip;
+	for (int i=0; i<4; i++)
+		IP[i]=ip->getNumber(i);
+	eNumber::pack(sip, IP);
+
+	if(sdir->getText().length()==0 || ldir->getText().length()==0)
+	{
+		errorMessage(_("invalid or missing dir or local dir"));
+		return;
+	}
+	else
+	{
+		cmd.sprintf("/elitedvb/network/nfs%d/",cur_entry);
+		eConfig::getInstance()->setKey((cmd+"ip").c_str(), sip);
+		eConfig::getInstance()->setKey((cmd+"sdir").c_str(), sdir->getText().c_str());
+		eConfig::getInstance()->setKey((cmd+"ldir").c_str(), ldir->getText().c_str());
+		eConfig::getInstance()->setKey((cmd+"fstype").c_str(), (int)combo_fstype->getCurrent()->getKey());
+		eConfig::getInstance()->setKey((cmd+"options").c_str(), (int)combo_options->getCurrent()->getKey());
+		eConfig::getInstance()->setKey((cmd+"extraoptions").c_str(), extraoptions->getText().c_str());
+		eConfig::getInstance()->setKey((cmd+"username").c_str(), user->getText().c_str());
+		eConfig::getInstance()->setKey((cmd+"password").c_str(), pass->getText().c_str());
+		eConfig::getInstance()->setKey((cmd+"automount").c_str(), (int)doamount->isChecked());
+	}
+
+	eMessageBox msg(
+		_("NFS/CIFS-Entry stored. Further entry?\n"),
+		_("NFS/CIFS-Setup..."),
+		eMessageBox::btYes|eMessageBox::btNo, eMessageBox::btNo);
+
+	msg.show();
+	int res=msg.exec();
+	msg.hide();
+
+	if (res == eMessageBox::btYes)
+	{
+		nextPressed();
+		setFocus(ip);
+	}
+}
+
+extern bool ismounted( eString mountpoint );
+
+void eMountSetup::mountPressed()
+{
+	if(sdir->getText().length()==0 || ldir->getText().length()==0)
+	{
+		errorMessage(_("invalid or missing dir or local dir"));
+		return;
+	}
+	else
+	{
+		if(ismounted(ldir->getText()))
+		{
+			errorMessage(_("NFS/CIFS mount error already mounted"));
+			return;
+		}
+
+		eString opt;
+
+		switch((int)combo_fstype->getCurrent()->getKey())
+		{
+			case 0: // NFS
+			{
+				opt.sprintf("/bin/mount -t nfs %d.%d.%d.%d:/%s",
+					ip->getNumber(0),ip->getNumber(1),
+					ip->getNumber(2),ip->getNumber(3),
+					sdir->getText().c_str());
+
+				if( combo_options->getCurrent()->getKey() && extraoptions->getText() )
+					opt+=eString().sprintf(" -o %s,%s",
+									combo_options->getCurrent()->getText().c_str(),
+									extraoptions->getText().c_str());
+				else if( combo_options->getCurrent()->getKey() )
+					opt+=eString().sprintf(" -o %s", combo_options->getCurrent()->getText().c_str());
+				else if( extraoptions->getText() )
+					opt+=eString().sprintf(" -o %s", extraoptions->getText().c_str());
+				break;
+			}
+			case 1: // CIFS
+			{
+				if(!user->getText())
+				{
+					errorMessage("missing username");
+					return;
+				}
+				opt.sprintf("/bin/mount -t cifs //bla -o user=%s,pass=%s,unc=//%d.%d.%d.%d/%s",
+					user->getText().c_str(), pass->getText().c_str(),
+					ip->getNumber(0),ip->getNumber(1),
+					ip->getNumber(2),ip->getNumber(3),
+					sdir->getText().c_str());
+
+				if( combo_options->getCurrent()->getKey() && extraoptions->getText() )
+					opt+=eString().sprintf(",%s,%s",
+									combo_options->getCurrent()->getText().c_str(),
+									extraoptions->getText().c_str());
+				else if( combo_options->getCurrent()->getKey() )
+					opt+=eString().sprintf(",%s", combo_options->getCurrent()->getText().c_str());
+				else if( extraoptions->getText() )
+					opt+=eString().sprintf(",%s", extraoptions->getText().c_str());
+				break;
+			}
+			default:
+				errorMessage("not supported network file system");
+				return;
+		}
+		opt+=' ';
+		opt+=ldir->getText().c_str();
+
+		if (!mountContainer)
+		{
+//			eDebug("%s", opt.c_str() );
+			mountContainer = new eConsoleAppContainer(opt.c_str());
+			CONNECT(mountContainer->appClosed, eMountSetup::appClosed);
+		}
+		timeout.start(3000,true);
+	}
+}
+
+void eMountSetup::umountPressed()
+{
+	eString error;
+
+	error.sprintf("%s umount '%s' %s",
+		(int)combo_fstype->getCurrent()->getKey()?"CIFS":"NFS",
+		ldir->getText().c_str(),
+		umount2(ldir->getText().c_str(), MNT_FORCE)?"FAILED!":"OK!");
+
+	errorMessage(error.c_str());
+}
+
+void eMountSetup::mountTimeout()
+{
+	delete mountContainer;
+	mountContainer=0;
+}
+
+void eMountSetup::appClosed(int)
+{
+	delete mountContainer;
+	mountContainer=0;
+
+	if ( timeout.isActive() )
+		timeout.stop();
+
+	eString error;
+	error.sprintf("%s mount '%d.%d.%d.%d/%s %s' %s",
+		(int)combo_fstype->getCurrent()->getKey()?"CIFS":"NFS",
+		ip->getNumber(0),ip->getNumber(1),
+		ip->getNumber(2),ip->getNumber(3),
+		sdir->getText().c_str(),
+		ldir->getText().c_str(),
+		ismounted(ldir->getText())?"OK!":"FAILED!" );
+		errorMessage(error);
+}
+
+void eMountSetup::automount()
+{
+	for(int e=0; e < MAX_NFS_ENTRIES; e++)
+	{
+		int itmp=0;
+		cmd.sprintf("/elitedvb/network/nfs%d/",e);
+		eConfig::getInstance()->getKey((cmd+"automount").c_str(), itmp);
+		if(itmp)
+		{
+			load_config();
+			mountPressed();
+		}
+	}
+}
+
+int eMountSetup::eventHandler(const eWidgetEvent &e)
+{
+	if (e.type == eWidgetEvent::execBegin )
+	{
+		setFocus(ip);
+		return 1;
+	}
+	return eWindow::eventHandler(e);
+}
+
+eMountSetup::~eMountSetup()
+{
+	delete mountContainer;
+}
+
+#endif
+
